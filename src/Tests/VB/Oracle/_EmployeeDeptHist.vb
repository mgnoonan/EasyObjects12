'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' EasyObjects.NET version 1.1
' Generated by MyGeneration Version # (1.1.7.7)

Imports System
Imports System.Data
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


NameSpace EasyObjects.Tests.Oracle

#Region " Schema "

Public Class EmployeeDeptHistSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared EMPLOYEEID As New SchemaItem("EMPLOYEEID", DbType.Decimal, False, False, False, True, False, False)
	Public Shared DEPARTMENTID As New SchemaItem("DEPARTMENTID", DbType.Decimal, False, False, False, True, False, False)
	Public Shared STARTDATE As New SchemaItem("STARTDATE", DbType.DateTime, False, True, False, False, False, False)
	Public Shared ENDDATE As New SchemaItem("ENDDATE", DbType.DateTime, False, True, False, False, False, False)
	Public Shared MODIFIEDDATE As New SchemaItem("MODIFIEDDATE", DbType.DateTime, False, True, False, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(EmployeeDeptHistSchema.EMPLOYEEID)
				_entries.Add(EmployeeDeptHistSchema.DEPARTMENTID)
				_entries.Add(EmployeeDeptHistSchema.STARTDATE)
				_entries.Add(EmployeeDeptHistSchema.ENDDATE)
				_entries.Add(EmployeeDeptHistSchema.MODIFIEDDATE)

            End If
            Return _entries
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _EmployeeDeptHist
    Inherits NCI.EasyObjects.EasyObject

    Sub New()
        Dim _schema As New EmployeeDeptHistSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "MNOONA01"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="DEPARTMENTID"></param>
	''' <param name="EMPLOYEEID"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal DEPARTMENTID As Decimal, ByVal EMPLOYEEID As Decimal) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, DEPARTMENTID)
				parameters.Add(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, EMPLOYEEID)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetEMPLOYEEDEPTHIST", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Me.Where.DEPARTMENTID.Value = DEPARTMENTID
				Me.Where.EMPLOYEEID.Value = EMPLOYEEID
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "daab_GetAllEMPLOYEEDEPTHIST", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()

	End Sub

    Protected Overloads Overrides Function GetInsertCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_AddEMPLOYEEDEPTHIST"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				CreateParameters(dbCommandWrapper)

			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not item.IsComputed Then
						If (item.IsAutoKey And Me.IdentityInsert) Or Not item.IsAutoKey Then
							Me.Query.AddInsertColumn(item)
						End If
					End If
				Next
				dbCommandWrapper = Me.Query.GetInsertCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				If Me.IdentityInsert Then
				Else
				End If

				CreateParameters(dbCommandWrapper)
				
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Overloads Overrides Function GetUpdateCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_UpdateEMPLOYEEDEPTHIST"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
				
				CreateParameters(dbCommandWrapper)

			Case CommandType.Text
                Me.Query.ClearAll()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddUpdateColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.EMPLOYEEID.Operator = WhereParameter.Operand.Equal
				Me.Where.DEPARTMENTID.Operator = WhereParameter.Operand.Equal
				dbCommandWrapper = Me.Query.GetUpdateCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				CreateParameters(dbCommandWrapper)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Protected Overloads Overrides Function GetDeleteCommand(commandType As CommandType) As DBCommandWrapper
	
		Dim dbCommandWrapper As DBCommandWrapper

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "daab_DeleteEMPLOYEEDEPTHIST"
				dbCommandWrapper = db.GetStoredProcCommandWrapper(sqlCommand)
		
				' Add primary key parameters
				dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current)
				dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current)

			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Me.Where.DEPARTMENTID.Operator = WhereParameter.Operand.Equal
				Me.Where.EMPLOYEEID.Operator = WhereParameter.Operand.Equal
				dbCommandWrapper = Me.Query.GetDeleteCommandWrapper()

				dbCommandWrapper.Command.Parameters.Clear()
				dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current)
				dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommandWrapper

    End Function

    Private Sub CreateParameters(ByVal dbCommandWrapper As DBCommandWrapper)
		
		dbCommandWrapper.AddInParameter("EMPLOYEEID", DbType.Decimal, "EMPLOYEEID", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("DEPARTMENTID", DbType.Decimal, "DEPARTMENTID", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("STARTDATE", DbType.DateTime, "STARTDATE", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("ENDDATE", DbType.DateTime, "ENDDATE", DataRowVersion.Current)
		dbCommandWrapper.AddInParameter("MODIFIEDDATE", DbType.DateTime, "MODIFIEDDATE", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property EMPLOYEEID() As Decimal
        Get
			Return Me.GetDecimal(EmployeeDeptHistSchema.EMPLOYEEID.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DEPARTMENTID() As Decimal
        Get
			Return Me.GetDecimal(EmployeeDeptHistSchema.DEPARTMENTID.FieldName)
      End Get
        Set(ByVal Value As Decimal)
			Me.SetDecimal(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, Value)
      End Set
    End Property

	Public Overridable Property STARTDATE() As DateTime
        Get
			Return Me.GetDateTime(EmployeeDeptHistSchema.STARTDATE.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(EmployeeDeptHistSchema.STARTDATE.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ENDDATE() As DateTime
        Get
			Return Me.GetDateTime(EmployeeDeptHistSchema.ENDDATE.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(EmployeeDeptHistSchema.ENDDATE.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MODIFIEDDATE() As DateTime
        Get
			Return Me.GetDateTime(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "EMPLOYEEDEPTHIST"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_EMPLOYEEID As String
			Get
				If Me.IsColumnNull(EmployeeDeptHistSchema.EMPLOYEEID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(EmployeeDeptHistSchema.EMPLOYEEID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeeDeptHistSchema.EMPLOYEEID.FieldName)
				Else
					Me.EMPLOYEEID = MyBase.SetDecimalAsString(EmployeeDeptHistSchema.EMPLOYEEID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DEPARTMENTID As String
			Get
				If Me.IsColumnNull(EmployeeDeptHistSchema.DEPARTMENTID.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(EmployeeDeptHistSchema.DEPARTMENTID.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeeDeptHistSchema.DEPARTMENTID.FieldName)
				Else
					Me.DEPARTMENTID = MyBase.SetDecimalAsString(EmployeeDeptHistSchema.DEPARTMENTID.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_STARTDATE As String
			Get
				If Me.IsColumnNull(EmployeeDeptHistSchema.STARTDATE.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(EmployeeDeptHistSchema.STARTDATE.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeeDeptHistSchema.STARTDATE.FieldName)
				Else
					Me.STARTDATE = MyBase.SetDateTimeAsString(EmployeeDeptHistSchema.STARTDATE.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ENDDATE As String
			Get
				If Me.IsColumnNull(EmployeeDeptHistSchema.ENDDATE.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(EmployeeDeptHistSchema.ENDDATE.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeeDeptHistSchema.ENDDATE.FieldName)
				Else
					Me.ENDDATE = MyBase.SetDateTimeAsString(EmployeeDeptHistSchema.ENDDATE.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MODIFIEDDATE As String
			Get
				If Me.IsColumnNull(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName)
				Else
					Me.MODIFIEDDATE = MyBase.SetDateTimeAsString(EmployeeDeptHistSchema.MODIFIEDDATE.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property EMPLOYEEID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeeDeptHistSchema.EMPLOYEEID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DEPARTMENTID() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeeDeptHistSchema.DEPARTMENTID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property STARTDATE() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeeDeptHistSchema.STARTDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ENDDATE() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeeDeptHistSchema.ENDDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MODIFIEDDATE() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(EmployeeDeptHistSchema.MODIFIEDDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property EMPLOYEEID() As WhereParameter 
			Get
				If _EMPLOYEEID_W Is Nothing Then
					_EMPLOYEEID_W = TearOff.EMPLOYEEID
				End If
				Return _EMPLOYEEID_W
			End Get
		End Property

		Public ReadOnly Property DEPARTMENTID() As WhereParameter 
			Get
				If _DEPARTMENTID_W Is Nothing Then
					_DEPARTMENTID_W = TearOff.DEPARTMENTID
				End If
				Return _DEPARTMENTID_W
			End Get
		End Property

		Public ReadOnly Property STARTDATE() As WhereParameter 
			Get
				If _STARTDATE_W Is Nothing Then
					_STARTDATE_W = TearOff.STARTDATE
				End If
				Return _STARTDATE_W
			End Get
		End Property

		Public ReadOnly Property ENDDATE() As WhereParameter 
			Get
				If _ENDDATE_W Is Nothing Then
					_ENDDATE_W = TearOff.ENDDATE
				End If
				Return _ENDDATE_W
			End Get
		End Property

		Public ReadOnly Property MODIFIEDDATE() As WhereParameter 
			Get
				If _MODIFIEDDATE_W Is Nothing Then
					_MODIFIEDDATE_W = TearOff.MODIFIEDDATE
				End If
				Return _MODIFIEDDATE_W
			End Get
		End Property

		Private _EMPLOYEEID_W As WhereParameter = Nothing
		Private _DEPARTMENTID_W As WhereParameter = Nothing
		Private _STARTDATE_W As WhereParameter = Nothing
		Private _ENDDATE_W As WhereParameter = Nothing
		Private _MODIFIEDDATE_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_EMPLOYEEID_W = Nothing
		_DEPARTMENTID_W = Nothing
		_STARTDATE_W = Nothing
		_ENDDATE_W = Nothing
		_MODIFIEDDATE_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property EMPLOYEEID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeeDeptHistSchema.EMPLOYEEID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DEPARTMENTID() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeeDeptHistSchema.DEPARTMENTID)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property STARTDATE() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeeDeptHistSchema.STARTDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ENDDATE() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeeDeptHistSchema.ENDDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MODIFIEDDATE() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(EmployeeDeptHistSchema.MODIFIEDDATE)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property EMPLOYEEID() As AggregateParameter 
			Get
				If _EMPLOYEEID_W Is Nothing Then
					_EMPLOYEEID_W = TearOff.EMPLOYEEID
				End If
				Return _EMPLOYEEID_W
			End Get
		End Property

		Public ReadOnly Property DEPARTMENTID() As AggregateParameter 
			Get
				If _DEPARTMENTID_W Is Nothing Then
					_DEPARTMENTID_W = TearOff.DEPARTMENTID
				End If
				Return _DEPARTMENTID_W
			End Get
		End Property

		Public ReadOnly Property STARTDATE() As AggregateParameter 
			Get
				If _STARTDATE_W Is Nothing Then
					_STARTDATE_W = TearOff.STARTDATE
				End If
				Return _STARTDATE_W
			End Get
		End Property

		Public ReadOnly Property ENDDATE() As AggregateParameter 
			Get
				If _ENDDATE_W Is Nothing Then
					_ENDDATE_W = TearOff.ENDDATE
				End If
				Return _ENDDATE_W
			End Get
		End Property

		Public ReadOnly Property MODIFIEDDATE() As AggregateParameter 
			Get
				If _MODIFIEDDATE_W Is Nothing Then
					_MODIFIEDDATE_W = TearOff.MODIFIEDDATE
				End If
				Return _MODIFIEDDATE_W
			End Get
		End Property

		Private _EMPLOYEEID_W As AggregateParameter = Nothing
		Private _DEPARTMENTID_W As AggregateParameter = Nothing
		Private _STARTDATE_W As AggregateParameter = Nothing
		Private _ENDDATE_W As AggregateParameter = Nothing
		Private _MODIFIEDDATE_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_EMPLOYEEID_W = Nothing
		_DEPARTMENTID_W = Nothing
		_STARTDATE_W = Nothing
		_ENDDATE_W = Nothing
		_MODIFIEDDATE_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class

End NameSpace


